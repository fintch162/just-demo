<% title "SMS" %> 

<%# init_class = Test.new %>
<h3 class="page-title">
  SMS
  <small>
    from telerivet
  </small>
</h3>
<div class="row inbox">
  <div class="col-md-2">
    <ul class="inbox-nav margin-bottom-10">
      <li class="compose-btn">
        <a class="btn default" data-toggle="modal" href="#responsive">
          <i class="fa fa-edit"></i>
          New SMS
        </a>
      </li>
      <li class="inbox">
        <%= link_to "Conversations", manage_messages_path , :class => "btn" %>
        <b></b>
      </li>
      <li class="sent active">
        <%= link_to "Incoming", manage_db_incoming_message_path , :class => "btn"%>
        <b></b>
      </li>
      <li class="draft">
        <%= link_to "Outgoing", manage_db_outgoing_message_path, :class => "btn"%>
        <b></b>
      </li>
      <li class="trash">
        <%= link_to "Failed", manage_incoming_messages_path, :class => "btn", :remote => true %>
        <b></b>
      </li>
    </ul>
  </div>
  <div class="col-md-10 parent_incomming">
    <div class="inbox-header">
      <h1 class="pull-left">Incoming Messages</h1>
    </div>
    <div class="inbox-content">    
      <% if current_admin_user.is_account_activated? %>
        <table class="table table-striped table-bordered table-hover dataTable" id="sample_1" aria-describedby="sample_1_info" data-source="<%= manage_db_messages_incoiming_mesg_from_db_json_path(:coordinator => current_admin_user.id, format: :json) %>">
          <thead>
          <tr role="row">
            <th style="width: 20px;"></th>
            <th>From</th>
            <th>Message</th>
            <th class="hidden-xs">Date</th>
            <th>Time</th>
          </tr>
          </thead>
          <tbody role="alert" aria-live="polite" aria-relevant="all">
            
          </tbody>
        </table>
      <% else %>
        <div id="prefix_1150005923018" class="Metronic-alerts alert alert-danger fade in">
          You will need to setup your telerivet API in order to send or receive SMS
        </div>
      <% end %>
    </div>
    
  </div>
</div>
<script type="text/javascript" src="/assets/jquery.dataTables.min.js"></script>
<script>
  $(document).ready(function(){
    $.extend($.fn.dataTableExt.oStdClasses, {
    'sPageEllipsis': 'paginate_ellipsis',
    'sPageNumber': 'paginate_number',
    'sPageNumbers': 'paginate_numbers'
  });
 
  $.fn.dataTableExt.oPagination.ellipses = {
      'oDefaults': {
          'iShowPages': 5
      },
      'fnClickHandler': function(e) {
          var fnCallbackDraw = e.data.fnCallbackDraw,
              oSettings = e.data.oSettings,
              sPage = e.data.sPage;
   
          if ($(this).is('[disabled]')) {
              return false;
          }
   
          oSettings.oApi._fnPageChange(oSettings, sPage);
          fnCallbackDraw(oSettings);
   
          return true;
      },
      // fnInit is called once for each instance of pager
      'fnInit': function(oSettings, nPager, fnCallbackDraw) {
          var oClasses = oSettings.oClasses,
              oLang = oSettings.oLanguage.oPaginate,
              that = this;
   
          var iShowPages = oSettings.oInit.iShowPages || this.oDefaults.iShowPages,
              iShowPagesHalf = Math.floor(iShowPages / 2);
   
          $.extend(oSettings, {
              _iShowPages: iShowPages,
              _iShowPagesHalf: iShowPagesHalf,
          });
   
          var oFirst = $('<a class="' + oClasses.sPageButton + ' ' + oClasses.sPageFirst + '">' + '<< ' + '</a>'),
              oPrevious = $('<a class="' + oClasses.sPageButton + ' ' + oClasses.sPagePrevious + '">' + ' < ' + '</a>'),
              oNumbers = $('<span class="' + oClasses.sPageNumbers + '"></span>'),
              oNext = $('<a class="' + oClasses.sPageButton + ' ' + oClasses.sPageNext + '">' + ' > ' + '</a>'),
              oLast = $('<a class="' + oClasses.sPageButton + ' ' + oClasses.sPageLast + '">' + ' >>' + '</a>');
   
          oFirst.click({ 'fnCallbackDraw': fnCallbackDraw, 'oSettings': oSettings, 'sPage': 'first' }, that.fnClickHandler);
          oPrevious.click({ 'fnCallbackDraw': fnCallbackDraw, 'oSettings': oSettings, 'sPage': 'previous' }, that.fnClickHandler);
          oNext.click({ 'fnCallbackDraw': fnCallbackDraw, 'oSettings': oSettings, 'sPage': 'next' }, that.fnClickHandler);
          oLast.click({ 'fnCallbackDraw': fnCallbackDraw, 'oSettings': oSettings, 'sPage': 'last' }, that.fnClickHandler);
   
          // Draw
          $(nPager).append(oFirst, oPrevious, oNumbers, oNext, oLast);
      },
      // fnUpdate is only called once while table is rendered
      'fnUpdate': function(oSettings, fnCallbackDraw) {
          var oClasses = oSettings.oClasses,
              that = this;
   
          var tableWrapper = oSettings.nTableWrapper;
   
          // Update stateful properties
          this.fnUpdateState(oSettings);
   
          if (oSettings._iCurrentPage === 1) {
              $('.' + oClasses.sPageFirst, tableWrapper).attr('disabled', true);
              $('.' + oClasses.sPagePrevious, tableWrapper).attr('disabled', true);
          } else {
              $('.' + oClasses.sPageFirst, tableWrapper).removeAttr('disabled');
              $('.' + oClasses.sPagePrevious, tableWrapper).removeAttr('disabled');
          }
   
          if (oSettings._iTotalPages === 0 || oSettings._iCurrentPage === oSettings._iTotalPages) {
              $('.' + oClasses.sPageNext, tableWrapper).attr('disabled', true);
              $('.' + oClasses.sPageLast, tableWrapper).attr('disabled', true);
          } else {
              $('.' + oClasses.sPageNext, tableWrapper).removeAttr('disabled');
              $('.' + oClasses.sPageLast, tableWrapper).removeAttr('disabled');
          }
   
          var i, oNumber, oNumbers = $('.' + oClasses.sPageNumbers, tableWrapper);
   
          // Erase
          oNumbers.html('');
   
          for (i = oSettings._iFirstPage; i <= oSettings._iLastPage; i++) {
              oNumber = $('<a class="' + oClasses.sPageButton + ' ' + oClasses.sPageNumber + '">' + oSettings.fnFormatNumber(i) + ' '+'</a>');
   
              if (oSettings._iCurrentPage === i) {
                  oNumber.attr('active', true).attr('disabled', true);
              } else {
                  oNumber.click({ 'fnCallbackDraw': fnCallbackDraw, 'oSettings': oSettings, 'sPage': i - 1 }, that.fnClickHandler);
              }
   
              // Draw
              oNumbers.append(oNumber);
          }
   
          // Add ellipses
          if (1 < oSettings._iFirstPage) {
              oNumbers.prepend('<span class="' + oClasses.sPageEllipsis + '">...</span>');
          }
   
          if (oSettings._iLastPage < oSettings._iTotalPages) {
              oNumbers.append('<span class="' + oClasses.sPageEllipsis + '">...</span>');
          }
      },
      // fnUpdateState used to be part of fnUpdate
      // The reason for moving is so we can access current state info before fnUpdate is called
      'fnUpdateState': function(oSettings) {
          var iCurrentPage = Math.ceil((oSettings._iDisplayStart + 1) / oSettings._iDisplayLength),
              iTotalPages = Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength),
              iFirstPage = iCurrentPage - oSettings._iShowPagesHalf,
              iLastPage = iCurrentPage + oSettings._iShowPagesHalf;
   
          if (iTotalPages < oSettings._iShowPages) {
              iFirstPage = 1;
              iLastPage = iTotalPages;
          } else if (iFirstPage < 1) {
              iFirstPage = 1;
              iLastPage = oSettings._iShowPages;
          } else if (iLastPage > iTotalPages) {
              iFirstPage = (iTotalPages - oSettings._iShowPages) + 1;
              iLastPage = iTotalPages;
          }
   
          $.extend(oSettings, {
              _iCurrentPage: iCurrentPage,
              _iTotalPages: iTotalPages,
              _iFirstPage: iFirstPage,
              _iLastPage: iLastPage
          });
      }
  };
    <% if current_admin_user.is_account_activated? %>
      $('#sample_1').dataTable({
        "iDisplayLength": 50,
        'sPaginationType': 'ellipses',
        "aoColumns": [
                    { "bSortable": false },
                    { "bSortable": false },
                    { "bSortable": false},
                    { "bSortable": false },
                    { "bSortable": false },
                  ],
          bProcessing: true,
          bServerSide: true,
          sAjaxSource: $('#sample_1').data('source'),        
        "fnDrawCallback": function (oSettings) {
           $('.page-content').css("min-height", "1000px");
        }
      });
    <% end %>
    $('#sample_1_info').hide();
    $('#sample_1_length').hide();
  });

  function DoNav(url){
    document.location.href = url;
  }
</script>